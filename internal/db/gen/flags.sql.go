// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: flags.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllFlags = `-- name: GetAllFlags :many
SELECT id, key, description, enabled, rollout, expression, config, env, updated_at FROM flags WHERE env = $1 ORDER BY key
`

func (q *Queries) GetAllFlags(ctx context.Context, env string) ([]Flag, error) {
	rows, err := q.db.Query(ctx, getAllFlags, env)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flag
	for rows.Next() {
		var i Flag
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Description,
			&i.Enabled,
			&i.Rollout,
			&i.Expression,
			&i.Config,
			&i.Env,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlagByKey = `-- name: GetFlagByKey :one
SELECT id, key, description, enabled, rollout, expression, config, env, updated_at FROM flags WHERE key = $1
`

func (q *Queries) GetFlagByKey(ctx context.Context, key string) (Flag, error) {
	row := q.db.QueryRow(ctx, getFlagByKey, key)
	var i Flag
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Description,
		&i.Enabled,
		&i.Rollout,
		&i.Expression,
		&i.Config,
		&i.Env,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertFlag = `-- name: UpsertFlag :exec
INSERT INTO flags (key, description, enabled, rollout, expression, config, env)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (key) DO UPDATE SET
  description = EXCLUDED.description,
  enabled     = EXCLUDED.enabled,
  rollout     = EXCLUDED.rollout,
  expression  = EXCLUDED.expression,
  config      = EXCLUDED.config,
  env         = EXCLUDED.env,
  updated_at  = now()
`

type UpsertFlagParams struct {
	Key         string      `json:"key"`
	Description pgtype.Text `json:"description"`
	Enabled     bool        `json:"enabled"`
	Rollout     int32       `json:"rollout"`
	Expression  pgtype.Text `json:"expression"`
	Config      []byte      `json:"config"`
	Env         string      `json:"env"`
}

func (q *Queries) UpsertFlag(ctx context.Context, arg UpsertFlagParams) error {
	_, err := q.db.Exec(ctx, upsertFlag,
		arg.Key,
		arg.Description,
		arg.Enabled,
		arg.Rollout,
		arg.Expression,
		arg.Config,
		arg.Env,
	)
	return err
}
